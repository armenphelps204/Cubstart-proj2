//
//  ViewController6_list.swift
//  Transfer Assistant App
//
//  Created by Armen Phelps on 10/18/20.
//

import UIKit

class ViewController6_list: UIViewController, UITableViewDataSource, UITableViewDelegate {
    
    let courseName = ["CS61A", "CS61B", "CS61C", "CS70", "CS168", "CS164", "CS162", "CS161", "CS169", "CS160","CS186", "CS184", "CS188", "CS189","CS170", "CS152", "CS174", "CS191", "CS176", "CS172"]
    let courseDescription = ["The purpose of CS61A is to teach you the core concepts of computer science. CS61A is not about learning a particular programming language, though the course does introduce the Python programming language and uses it, along with a little Scheme and SQL, to teach programming concepts. This course concentrates on the idea of abstraction and using this idea to solve problems. The course considers a series of techniques for controlling program complexity, such as functional programming, data abstraction, and object-oriented programming.","The purpose of CS61B is to teach you basic algorithms, data structures, and fundamentals of software engineering. Additionally, some of the class is focused on learning Java (object oriented design, inheritance, etc).", "The course focuses on concepts that drive computing architecture. Students will explore the software-hardware connection starting with high-level software with C and low-level assembly language with RISC-V (developed at Berkeley), as well as explore circuit and processor design. Students will then look at modern developments, such as different levels of parallelisms in computer processors, distributed computing, and warehouse scale computers (WSCs). Lastly, students will be introduced to basic operating system concepts. (Note: In some versions of the course OS concepts are covered before distributed computing and WSCs.)", "The purpose of CS70 is to provide the foundation for algorithms, concepts, and techniques to be expanded upon in further EECS classes. This foundation includes writing proofs (with various proof techniques), Boolean logic, modular arithmetic, basic graph theory, and discrete and continuous probability.", "This course is an introduction to the Internet architecture. We will focus on the concepts and fundamental design principles that have contributed to the Internet's scalability and robustness and survey the various protocols and algorithms used within this architecture. Topics include layering, addressing, intradomain routing, interdomain routing, reliable delivery, congestion control, and the core protocols (e.g., TCP, UDP, IP, DNS, and HTTP) and network technologies (e.g., Ethernet, wireless).","CS164 is an introduction to the design of programming languages and the implementation of translators for them. In the class, you'll do some general exploration of programming language design and its implications for implementation, and look at a dialect of at least one particular language.","The purpose of this course is to teach the design of operating systems and operating systems concepts that appear in other advanced systems. Topics covered include operating systems, systems programming, networked and distributed systems, and storage systems, including multiple-program systems (processes, interprocess communication, synchronization), memory allocation (segmentation, paging), resource allocation and scheduling, file systems, basic networking (sockets, layering, APIs, reliability), transactions, security and privacy.", "This course is about security in a variety of domains, including the web, networking, operating systems, and cryptography. It goes over security techniques, programming involved to repel attacks, encryption, computer safety, networking basics, and other topics. It also frequently uses real-world stories and applications as case studies.", "CS169 is about all the things that go behind software engineering and software development.","CS160 is an introduction to human-computer interaction and user interface design. The course teaches you how to prototype, evaluate, and design user interfaces. Students work in groups of 4-5 students in this project-based course. Unlike most other CS classes, CS160 does not focus on specific algorithms, techniques, or technologies. Instead, it is about developing a broad set of skills relevant to user-focused design and implementation, which include ideation, assessment, communication, rapid prototyping, implementation, and evaluation. The course culminates in a large final group project that is proposed by your group and is an opportunity to apply the broad set of skills you acquire throughout the semester to a real project for real users.", "Access methods and file systems to facilitate data access. Hierarchical, network, relational, and object-oriented data models. Query languages for models. Embedding query languages in programming languages. Database services including protection, integrity control, and alternative views of data. High-level interfaces including application generators, browsers, and report writers. Introduction to transaction processing. Database system implementation to be done as a term project.","Techniques of modeling objects for the purpose of computer rendering: boundary representations, constructive solids geometry, hierarchical scene descriptions. Mathematical techniques for curve and surface representation. Basic elements of a computer graphics rendering pipeline; architecture of modern graphics display devices. Geometrical transformations such as rotation, scaling, translation, and their matrix representations. Homogeneous coordinates, projective and perspective transformations. Algorithms for clipping, hidden surface removal, rasterization, and anti-aliasing. Scan-line based and ray-based rendering algorithms. Lighting models for reflection, refraction, transparency. Cameras and lenses. Color and perception. Animation, kinematics, physical simulation. Digital image processing and computational imaging; light field cameras.","CS188 introduces the basic ideas and techniques underlying the design of intelligent computer systems with a specific emphasis on the statistical and decision-theoretic modeling paradigm. By the end of the course, you will have built autonomous agents that efficiently make decisions in stochastic and in adversarial settings, drawn inferences in uncertain environments, optimized actions for arbitrary reward structures, and created machine learning algorithms.","The purpose of CS 189 is to provide an introduction to machine learning. Machine learning is chiefly concerned with understanding structures within data and applying these structures to solve problems that can involve predictions and clustering, among other statistical applications. In this course, the recurring example problems are making an email spam filter and a handwritten-digit recognizer. The course aims to provide theoretical foundations, algorithms, methodologies, and applications for machine learning, though it is more akin to a bag of tools class rather than one that focuses heavily on mathematical foundations (CS281A provides that). Topics may include supervised methods for regression and classification (linear models, decision trees, neural networks, ensemble methods, instance-based methods); generative and discriminative probabilistic models; Bayesian parametric learning; density estimation and clustering; Bayesian networks; time series models; dimensionality reduction; programming projects covering a variety of real-world applications.","CS 170 is an introductory course to theoretical computer science and surveys a variety of algorithm paradigms. Central concepts are algorithm design, algorithmic proofs, and running time analysis. The course also serves as an intro to complexity classes, exploring NP-completeness. The format of assignments is typically written problem sets, with pseudocode expected rather than compilable computer code.", "CS152 provides foundational knowledge for students seeking to learn about computer architecture. A handful of topics taught in this class may also help prepare students for operating systems courses, such as CS162. CS152 fulfills the design course requirement for EECS and L&S CS majors. This course is taught above the digital circuit abstraction, and focuses on the design of processors at a higher level. It begins with discussing important architectures in history, then moves on to ISA design, pipelining, memory hierarchy, and virtual memory. Several types of processors are then discussed, including out-of-order, superscalar, and vector processors.","A class with a sizable probability component would probably help (Math55 or CS70), but a probability-heavy course (Stat134 or EE126) would help more.","As an overview class, it provides a broad introduction to quantum computation theory, quantum algorithms, and physical implementations. As it is also cross-listed with Physics and Chemistry, the topics treated will not be extremely in-depth, since different sections of the class will appeal to different majors.", "In 176, we study algorithms and data structures for many applications in Computational Biology. We discuss everything from genome searching, DNA alignment, evolutionary tree of life, and detecting coding regions. \n \n NOTE: There is no biology prereq for this course. The class focuses primarily on algorithms, only referencing biology as the motivation for certain problems.","This course covers three main areas: automata theory, computability theory, and complexity theory. Automata theory explores what the basic mathematical models of computation are. Computability theory explores what problems can be solved by computers. Complexity theory explores what makes some problems computationally hard and others easy."]
 
    @IBOutlet weak var tableViewCourse: UITableView!
   
    func tableView(_ tableView: UITableView, numberOfRowsInSection section: Int) -> Int {
        return courseName.count
    }
    
    func tableView(_ tableView: UITableView, cellForRowAt indexPath: IndexPath) -> UITableViewCell {
        let cell = tableView.dequeueReusableCell(withIdentifier: "course", for: indexPath)
        
        cell.textLabel?.text = courseName[indexPath.row]
        return cell
    }
    

    
    override func prepare( for segue: UIStoryboardSegue, sender: Any?){
        
        if segue.identifier == "description"{
            
            if let indexPath = tableViewCourse.indexPathForSelectedRow{
                let selectedRow = indexPath.row
                    let vc : CourseDescriptionViewController = segue.destination as! CourseDescriptionViewController
                  
                    vc.name = courseDescription[selectedRow]
            }
        }
    
    }

 
}
